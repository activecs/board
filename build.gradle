apply plugin: 'maven'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'tomcat'
apply plugin: 'wrapper'
apply plugin: 'jacoco'
apply plugin: 'sonar-runner'
apply plugin: 'build-dashboard'
apply plugin: 'ssh'
apply plugin: 'compass'

group = 'com.kharkiv.board'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = 1.7
targetCompatibility = 1.7
compileJava.options.encoding = 'UTF-8'

ext {
	SYSTEM_PROPERTY_ENVIRONMENT = 'env'
	DEFAULT_ENV = 'config-local'
	YAML_PROPERTIES_FILE = file('properties.yaml')
	RED_HAT_USERNAME = '53ea659450044640c600042b'
	RED_HAT_WAR_NAME = 'ROOT'
	RED_HAT_TOMCAT_HOME = '/app-root/data/tomcat'
	RED_HAT_WAR_HOME = "/var/lib/openshift/${RED_HAT_USERNAME}${RED_HAT_TOMCAT_HOME}/webapps"
	ASSEMBLED_WAR_HOME = war.archivePath.absolutePath
}

remotes {
  redHat {
    host = 'board-netstalk3r.rhcloud.com'
    user = RED_HAT_USERNAME
	identity = file('ssh/id_rsa')
	knownHosts = file('ssh/known_hosts')
	retryCount = 10
  }
}

repositories { 
	maven { url "http://repo.maven.apache.org/maven2" } 
	mavenCentral()
}

sourceSets {
	main {
		java { 
				srcDir 'src/main/java' 
				}
		resources { srcDir 'src/main/resources' }
	}
	test {
		java { 
				srcDir 'src/test/java'
				include '**/*Test.java' 
				}
		resources { srcDir 'src/test/resources' }
	}
}

buildscript {
    repositories {
		jcenter()
		mavenCentral()
		maven {url 'http://dl.bintray.com/robfletcher/gradle-plugins'}
	}
    dependencies {
		classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:1.2.4'
		classpath 'org.hidetake:gradle-ssh-plugin:0.3.10'
		classpath 'org.gradle.plugins:gradle-compass:1.0.7'
	}
}

dependencies {
	compile group: 'org.springframework', 				name:'spring-core', 					version:'4.0.5.RELEASE'
	compile group: 'org.springframework', 				name:'spring-context', 					version:'4.0.5.RELEASE'
	compile group: 'org.springframework', 				name:'spring-orm', 						version:'4.0.5.RELEASE'
	compile group: 'org.springframework', 				name:'spring-web', 						version:'4.0.5.RELEASE'
	compile group: 'org.springframework', 				name:'spring-jdbc', 					version:'4.0.5.RELEASE'
	compile group: 'org.hibernate',						name:'hibernate-core', 					version:'4.3.5.Final'
	compile group: 'org.hibernate',						name:'hibernate-entitymanager',			version:'4.3.5.Final'
	compile group: 'org.hibernate',						name:'hibernate-validator', 			version:'5.1.0.Final'
	compile group: 'org.apache.commons', 				name:'commons-lang3', 					version:'3.3.2'
	compile group: 'commons-collections', 				name:'commons-collections', 			version:'3.2.1'
	compile group: 'com.google.guava', 					name:'guava', 							version:'17.0'
	compile group: 'com.fasterxml.jackson.core',		name:'jackson-core',					version:'2.4.0'
	compile group: 'com.fasterxml.jackson.core',		name:'jackson-databind',				version:'2.4.0'
	compile group: 'com.fasterxml.jackson.core',		name:'jackson-annotations',				version:'2.4.0'
	compile group: 'org.slf4j', 						name:'slf4j-api', 						version:'1.7.5'
	compile group: 'javax.inject', 						name:'javax.inject',					version:'1'
	compile group: 'javax.servlet', 					name:'jstl', 							version:'1.2'
	compile group: 'com.google.code.gson',				name:'gson',							version:'2.2.4'
	
	runtime group: 'org.apache.logging.log4j',		name:'log4j-slf4j-impl',			version:'2.0-rc1'
	runtime group: 'org.apache.logging.log4j',		name:'log4j-core',					version:'2.0-rc1'
	runtime group: 'org.apache.logging.log4j',		name:'log4j-jcl', 					version:'2.0-rc1'
	runtime group: 'mysql', 						name:'mysql-connector-java',	 	version:'5.1.30'
	
	testCompile group: 'junit', 					name: 'junit', 						version:'4.11'
	testCompile group: 'org.mockito', 				name: 'mockito-core', 				version: '1.9.5'
	testCompile group: 'org.easytesting', 			name: 'fest-assert-core', 			version:'2.0M10'
	testCompile group: 'org.springframework', 		name: 'spring-test', 				version:'4.0.5.RELEASE'
	testCompile group: 'com.jayway.jsonpath', 		name:'json-path',					version:'0.9.1'
	
	providedCompile group: 'javax.servlet', 		name:'javax.servlet-api',			version:'3.1.0'
	
	def tomcatVersion = '7.0.55'
    tomcat group: 'org.apache.tomcat.embed',		name:'tomcat-embed-core',			version:tomcatVersion
    tomcat group: 'org.apache.tomcat.embed',		name:'tomcat-embed-logging-juli',	version:tomcatVersion
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }
}

def getEnvironmentName() {
	return System.getProperty(SYSTEM_PROPERTY_ENVIRONMENT, DEFAULT_ENV);
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
}

jacocoTestReport.dependsOn {
    tasks.findAll {task -> task.name == 'test'}
}

jacoco {
    toolVersion = "0.7.1.201405082137"
    reportsDir = file("$buildDir/reports/coverage")
}

compass {
    cssDir = file('src/main/webapp/resources/css')
    sassDir = file('src/main/webapp/WEB-INF/scss')
}
processResources.inputs.files compileSass
tomcatRun.dependsOn watchSass
clean.dependsOn cleanCompileSass

sonarRunner {
    sonarProperties {
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.jdbc.url", "jdbc:mysql://localhost:3306/sonar"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", "sonar"
        property "sonar.jdbc.password", "sonar"
    }
}

tomcat {
	httpPort = 8095
	httpsPort = 8096
	stopPort = 8083
	ajpPort = 8010
	enableSSL = true
}
tomcatRun.daemon = false
tomcatRun.contextPath = ''

eclipse {
	project {
		natures += [
			'org.springframework.ide.eclipse.core.springnature',
			'org.springsource.ide.eclipse.gradle.core.nature',
		]
	}
}

task deployToRedHat(type: SshTask, dependsOn: 'war', group:'Deploy'){
	session(remotes.redHat) {
		execute "sh .${RED_HAT_TOMCAT_HOME}/bin/shutdown.sh"
		execute "rm -r -f .${RED_HAT_TOMCAT_HOME}/webapp/${RED_HAT_WAR_NAME}"
		execute "rm -f .${RED_HAT_TOMCAT_HOME}/webapp/${RED_HAT_WAR_NAME}.war"
		put     "${ASSEMBLED_WAR_HOME}", "${RED_HAT_WAR_HOME}/${RED_HAT_WAR_NAME}.war"
		execute "sh .${RED_HAT_TOMCAT_HOME}/bin/startup.sh"
	}
}
deployToRedHat.description = 'Deploys application to red hat hosting'

task generateProperties {
	description = "Generates properties for environments"
	inputs.files YAML_PROPERTIES_FILE
	doLast {
		def env = getEnvironmentName();
		def loader = new YamlLoader(env);
		loader.process()
	}
}
processResources.dependsOn generateProperties
